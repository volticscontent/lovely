// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum para tipos de g√™nero
enum Gender {
  MALE
  FEMALE
  NON_BINARY
  OTHER
}

// Enum para tipos de relacionamento
enum RelationshipType {
  MONOGAMOUS
  NON_MONOGAMOUS
  POLYAMOROUS
  OPEN
  OTHER
}

// Enum para orienta√ß√£o sexual
enum SexualOrientation {
  STRAIGHT
  GAY
  LESBIAN
  BISEXUAL
  PANSEXUAL
  ASEXUAL
  OTHER
}

// Modelo principal de usu√°rio
model User {
  id              String    @id @default(uuid())
  email           String    @unique
  name            String
  password        String
  isActive        Boolean   @default(true)
  emailVerified   Boolean   @default(false)
  emailVerifiedAt DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relacionamentos existentes
  relationships RelationshipMember[]
  games         Game[]
  profiles      Profile[]
  subscriptions Subscription[]
  sessions      Session[]

  // Novos relacionamentos para URLs
  personalizedUrls PersonalizedUrl[]
  shortUrls        ShortUrl[]

  // Relacionamentos para pagamentos
  payments Payment[]

  @@map("users")
}

// Modelo para relacionamentos
model Relationship {
  id        String           @id @default(uuid())
  name      String
  type      RelationshipType
  isActive  Boolean          @default(true)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  // Relacionamentos
  members RelationshipMember[]

  @@map("relationships")
}

// Modelo para membros do relacionamento
model RelationshipMember {
  id             String   @id @default(uuid())
  userId         String
  relationshipId String
  role           String // Ex: "primary", "secondary", etc.
  joinedAt       DateTime @default(now())

  // Relacionamentos
  user         User         @relation(fields: [userId], references: [id])
  relationship Relationship @relation(fields: [relationshipId], references: [id])

  @@map("relationship_members")
}

// Modelo para jogos/intera√ß√µes
model Game {
  id          String   @id @default(uuid())
  name        String
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamento com usu√°rio
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("games")
}

model Profile {
  id          String   @id @default(uuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id])
  partnerName String?
  preferences String[]
  avatar      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Subscription {
  id        String    @id @default(uuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  planId    String
  plan      Plan      @relation(fields: [planId], references: [id])
  status    String // active, cancelled, expired
  startDate DateTime  @default(now())
  endDate   DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relacionamento para pagamentos
  payments Payment[]
}

model Plan {
  id            String         @id @default(uuid())
  name          String
  description   String
  price         Float
  duration      Int // em dias
  features      String[]
  displayName   String // Nome para exibi√ß√£o na UI
  subtitle      String // Subt√≠tulo do plano
  buttonText    String // Texto do bot√£o
  isHighlighted Boolean        @default(false) // Se √© o plano em destaque
  badge         String? // Badge opcional (ex: "üèÜ Mais vendido")
  subscriptions Subscription[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  // Relacionamento para pagamentos
  payments Payment[]
}

model Session {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model PersonalizedUrl {
  id          String    @id @default(uuid())
  userId      String
  slug        String    @unique
  originalUrl String
  customPath  String?
  isActive    Boolean   @default(true)
  expiresAt   DateTime?
  clicksCount Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  shortUrls ShortUrl[]

  @@map("personalized_urls")
}

model ShortUrl {
  id                String    @id @default(uuid())
  userId            String?
  shortCode         String    @unique
  originalUrl       String
  personalizedUrlId String?
  clicksCount       Int       @default(0)
  expiresAt         DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  user            User?            @relation(fields: [userId], references: [id], onDelete: Cascade)
  personalizedUrl PersonalizedUrl? @relation(fields: [personalizedUrlId], references: [id], onDelete: Cascade)

  @@map("short_urls")
}

model UrlAnalytic {
  id        String   @id @default(uuid())
  urlId     String
  urlType   String // 'personalized' ou 'short'
  visitorIp String?
  userAgent String?
  referer   String?
  country   String?
  city      String?
  clickedAt DateTime @default(now())

  @@map("url_analytics")
}

// Enum para status de pagamento
enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

// Enum para tipos de evento de webhook
enum WebhookEventType {
  PAYMENT_CREATED
  PAYMENT_APPROVED
  PAYMENT_CANCELLED
  PAYMENT_REFUNDED
  SUBSCRIPTION_CREATED
  SUBSCRIPTION_RENEWED
  SUBSCRIPTION_CANCELLED
  SUBSCRIPTION_EXPIRED
}

// Modelo para transa√ß√µes de pagamento
model Payment {
  id             String  @id @default(uuid())
  userId         String?
  subscriptionId String?
  planId         String

  // Dados do LASTLINK
  lastlinkId     String @unique // ID da transa√ß√£o no LASTLINK
  lastlinkStatus String // Status original do LASTLINK

  // Dados do pagamento
  amount   Float
  currency String        @default("BRL")
  status   PaymentStatus @default(PENDING)

  // Dados do cliente
  customerEmail    String
  customerName     String?
  customerDocument String?
  customerPhone    String?

  // Dados do produto/plano
  productName        String
  productDescription String?

  // Metadados
  paymentMethod String? // pix, credit_card, etc.
  pixCode       String? // C√≥digo PIX se aplic√°vel
  pixExpiresAt  DateTime? // Expira√ß√£o do PIX

  // Timestamps
  paidAt    DateTime?
  expiresAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relacionamentos
  user          User?          @relation(fields: [userId], references: [id], onDelete: SetNull)
  subscription  Subscription?  @relation(fields: [subscriptionId], references: [id], onDelete: SetNull)
  plan          Plan           @relation(fields: [planId], references: [id])
  webhookEvents WebhookEvent[]

  @@map("payments")
}

// Modelo para eventos de webhook
model WebhookEvent {
  id        String  @id @default(uuid())
  paymentId String?

  // Dados do evento
  eventType WebhookEventType
  eventId   String           @unique // ID √∫nico do evento no LASTLINK

  // Payload completo do webhook
  rawPayload Json // Dados brutos do webhook

  // Status do processamento
  processed    Boolean   @default(false)
  processedAt  DateTime?
  errorMessage String?
  retryCount   Int       @default(0)

  // Metadados
  sourceIp  String?
  userAgent String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamentos
  payment Payment? @relation(fields: [paymentId], references: [id], onDelete: SetNull)

  @@map("webhook_events")
}

// Modelo para logs de webhook (para auditoria)
model WebhookLog {
  id             String   @id @default(uuid())
  endpoint       String // Endpoint que recebeu o webhook
  method         String // GET, POST, etc.
  headers        Json // Headers da requisi√ß√£o
  body           Json? // Corpo da requisi√ß√£o
  responseStatus Int // Status code da resposta
  responseBody   String? // Corpo da resposta
  processingTime Int? // Tempo de processamento em ms
  sourceIp       String?
  userAgent      String?
  createdAt      DateTime @default(now())

  @@map("webhook_logs")
}
